/*
    private OWLOntologyManager manager = null;
    private OWLDataFactory factory = null;
    private OWLOntology ont = null;
    private OWLDatatype t_int = null;
    private OWLDatatype t_string = null;
    private OWLDatatype t_float = null;
    private String ontIRI = null;
    private PrefixManager pm = null;

    private String HOME_DIR = null;
    private String dom_dir = null;
    private File snp_f = null;
    */

    private static final String ONT_URL = "http://www.cs.ox.ac.uk/isg/krr/ontologies/FlightOntology-1#";

    static OWLOntology ontology;
    static OWLReasonerFactory reasonerFactory = null;
    static OWLReasoner reasoner = null;
    static OWLOntologyManager ontologyManager;

    @Rule
    public TestName name = new TestName();

    @BeforeClass
    static public void init() throws OWLOntologyCreationException, IOException {
        ontologyManager = OWLManager.createOWLOntologyManager();
        ontology = ontologyManager.loadOntologyFromOntologyDocument(new URL(ONT_URL).openStream());
    }

    @Before
    public void start() throws Exception, IOException {

        System.err.flush();
        System.err.flush();
        System.err.println("");
        System.err.println("================== Start of " + name.getMethodName() + "==================");
    }

    @Test
    // Get Statistical Data of the ontology
    // InSignature means that are referenced in the ontology file
    public void ontologyStats() {
        try {
            // Get URI of the ontology
            System.out.println(ontology.getOntologyID().getOntologyIRI().get());
            // Get number of classes
            System.out.println("getClassInSignature() " + ontology.getClassesInSignature().size());
            // Get number of Data Properties
            System.out.println("getDataPropertitiesInProperties() " + ontology.getDataPropertiesInSignature().size());
            // Get number of Data Types
            System.out.println("getDataTypesInSignature" + ontology.getDatatypesInSignature());
            // Number of Axioms in the ontology
            // (EXCLUDED = In and only in this ontology)
            // (INCLUDED = All the axioms (included the imports))
            System.out.println("getAxioms" + ontology.getAxioms(Imports.EXCLUDED).size());
            // Get number of assertions
            System.out.println("DATA_PROPERTIES_ASSERTION" + ontology.getAxioms(AxiomType.DATA_PROPERTY_ASSERTION, Imports.EXCLUDED).size());
            // Get number of properties domain
            System.out.println("DATA_PROPERTIES_DOMAIN" + ontology.getAxioms(AxiomType.DATA_PROPERTY_DOMAIN, Imports.EXCLUDED).size());
            // Get number of properties range
            System.out.println("DATA_PROPERTIES_RANGE" + ontology.getAxioms(AxiomType.DATA_PROPERTY_RANGE, Imports.EXCLUDED).size());            System.out.println("DATATYPE_DEFINITION");
            // Get number of assertion properties domain
            System.out.println("ANNOTATION_PROPERTY_DOMAIN" + ontology.getAxioms(AxiomType.ANNOTATION_PROPERTY_DOMAIN, Imports.EXCLUDED).size());
            // Get number of assertion properties range
            System.out.println("ANNOTATION_PROPERTY_RANGE" + ontology.getAxioms(AxiomType.ANNOTATION_PROPERTY_RANGE, Imports.EXCLUDED).size());
            // Get number of annotation assertions
            System.out.println("ANNOTATION_ASSERTION" + ontology.getAxioms(AxiomType.ANNOTATION_ASSERTION, Imports.EXCLUDED).size());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    // List the classes referred in the Ontology (URIs)
    public void listClasses() {
        for (OWLClass cls: ontology.getClassesInSignature()) {
            System.out.println(cls.getIRI());
        }
    }

    @Test

    public void getDataPropertiesTest() {
        for (OWLDataPropertyDomainAxiom item: ontology.getAxioms(AxiomType.DATA_PROPERTY_DOMAIN)) {
            for (OWLDataProperty iterable_element : item.getDataPropertiesInSignature()){
                System.out.println(iterable_element);
            }
        }
        System.out.println("---------");
        for (OWLDataPropertyAssertionAxiom item: ontology.getAxioms(AxiomType.DATA_PROPERTY_ASSERTION)) {
            System.out.println("DATA_PROPERTY_ASSERTION " + item);
        }
        System.out.println("---------");
        for (OWLDataPropertyRangeAxiom item: ontology.getAxioms(AxiomType.DATA_PROPERTY_RANGE)) {
            System.out.println("DATA_PROPERY_RANGE " + item);
            System.out.println("DATA_PROPERTY_RANGE item.getRange" + item.getRange());
        }

    }

    @Test
    // Get the classes defined in the ontology
    public void ontologyClassDeclarations() {
        for (OWLAxiom a: AxiomType.getAxiomsOfTypes(ontology.getAxioms(), AxiomType.DECLARATION)) {
            if (a.getSignature().iterator().next().isOWLClass()) {
                System.out.println(a);
            }
        }
    }

    @Test
    // Iterate through each class declaration and get the annotations, instances associated and the individuals
    public void EntitySearchClassTest() throws OWLOntologyCreationException, IOException {
        for (OWLAxiom iterable_element : ontology.getAxioms(Imports.EXCLUDED)) {
            if (iterable_element.isOfType(AxiomType.DECLARATION) && iterable_element.getSignature().iterator().next().isOWLClass()) {
                OWLClass aux = iterable_element.getSignature().iterator().next().asOWLClass();
                System.out.println(aux.getIRI());
                System.out.println("\tEntitySearcher.getAnnotationsObjects " + EntitySearcher.getAnnotationObjects(aux,ontology));
                System.out.println("\tEntitySearcher.getAnnotationsObjects " + EntitySearcher.getInstances(aux,ontology));
                System.out.println("\tEntitySearcher.getAnnotationsObjects " + EntitySearcher.getIndividuals(aux,ontology));
            }
        }
    }


    EntailmentCalculation(String home_dir,String iri_s) throws OWLOntologyCreationException{
        manager = OWLManager.createOWLOntologyManager();
        factory = manager.getOWLDataFactory();
        t_int = factory.getOWLDatatype(OWL2Datatype.XSD_INT.getIRI());
        t_string = factory.getOWLDatatype(OWL2Datatype.XSD_STRING.getIRI());
        t_float = factory.getOWLDatatype(OWL2Datatype.XSD_FLOAT.getIRI());
        pm = new DefaultPrefixManager(null, null, iri_s);
        ontIRI = iri_s;

        HOME_DIR = home_dir;
        File d = new File((new File(HOME_DIR, snp_dir_name)).getPath(), dom_name);
        if (!d.exists()) {
            d.mkdir();
        }
        this.dom_dir = d.getPath();
        this.snp_f = new File(dom_dir, snp_name + ".owl");
    }



    /**
     * load existing ontology (TBox or snapshot in previous iteration)
     *
     * @throws OWLOntologyCreationException
     */
    private void loadBootstrapOnto() throws OWLOntologyCreationException {
        if (snp_f.exists()) {
            ont = manager.loadOntologyFromOntologyDocument(snp_f);
        } else {
            File OntoFile = new File(HOME_DIR, "FlightOntology.owl");
            ont = manager.loadOntologyFromOntologyDocument(OntoFile);
        }
    }
